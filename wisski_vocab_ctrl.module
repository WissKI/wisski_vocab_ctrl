<?php
// $Id$

/*
* @author Martin Scholz, unless otherwise noted
*/



function wisski_vocab_ctrl_perm () {
  return array('wisski administrate page');
}


function wisski_vocab_ctrl_theme() {
  return array(
    'wisski_vocab_ctrl_table' => array(
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'wisski_vocab_ctrl_field_settings_table' => array(
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}




function wisski_vocab_ctrl_menu () {

  $items = array();
  $items['admin/settings/wisski/vocab_ctrl'] = array(
      'title' => 'Vocabulary Control',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'wisski_vocab_ctrl_admin_list',
      'page arguments' => array(),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/mappings'] = array(
      'title' => 'Mappings',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_mapping_settings'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'weight' => 30,
      );
  $items['admin/settings/wisski/vocab_ctrl/fields'] = array(
      'title' => 'Fields',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_field_settings'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'weight' => 20,
      );
  $items['admin/settings/wisski/vocab_ctrl/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'page callback' => 'wisski_vocab_ctrl_admin_list',
      'page arguments' => array(),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'weight' => 0,
      );
  $items['admin/settings/wisski/vocab_ctrl/add'] = array(
      'title' => 'Add',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_edit'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'weight' => 10,
      );
  $items['admin/settings/wisski/vocab_ctrl/adv_indexing'] = array(
      'title' => 'Advanced Indexing',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_cron_indexing'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      'weight' => 50,
      );
  $items['admin/settings/wisski/vocab_ctrl/adv_indexing/%/stop'] = array(
      'title' => 'Indexing Task',
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_cron_indexing_op',
      'page arguments' => array(5,6),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/adv_indexing/%/resume'] = array(
      'title' => 'Indexing Task',
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_cron_indexing_op',
      'page arguments' => array(5,6),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/adv_indexing/%/delete'] = array(
      'title' => 'Indexing Task',
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_cron_indexing_op',
      'page arguments' => array(5,6),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/%/edit'] = array(
      'title' => 'Edit Vocabulary',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_edit', 4),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/%/delete'] = array(
      'title' => 'Delete Vocabulary',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_delete', 4),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['admin/settings/wisski/vocab_ctrl/clone/%'] = array(
      'title' => 'Clone Vocabulary',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_vocab_ctrl_admin_edit', NULL, 5),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['wisski/vocab_ctrl/edit/js/%'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_edit_js',
      'page arguments' => array(4),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['wisski/vocab_ctrl/edit/js/%/%'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_edit_js',
      'page arguments' => array(4, 5),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  $items['wisski/vocab_ctrl/index_cron'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_vocab_ctrl_admin_check_reindex',
      'page arguments' => array(4, 5),
      'access arguments' => array('wisski use editor'),
      'file' => 'wisski_vocab_ctrl.admin.inc',
      );
  return $items;

}



/** Implementation of hook_init */
function wisski_vocab_ctrl_init() {
  
  if (variable_get('wisski_vocab_ctrl_last_reindex', 0) + 36000 < time()) {
    variable_set('wisski_vocab_ctrl_needs_reindex', TRUE);
  }
  //wisski_vocab_ctrl_check_reindex(FALSE);

  drupal_add_css(drupal_get_path('module', 'wisski_vocab_ctrl') . '/wisski_vocab_ctrl.css');

}


function wisski_vocab_ctrl_cron() {
  
  // execute cron mode indexing
  include_once('wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_index_rebuilds_exec_task();

}



/**Determine whether or not to set an ajax call to get
* a reindexing of vocabulary entries done.
*/
function wisski_vocab_ctrl_check_reindex($set = FALSE) {

  if ($set) variable_set('wisski_vocab_ctrl_needs_reindex', TRUE);

  static $checked = FALSE;
  if ($checked) return;

  // implement a cron like callback
  // to trigger reindexing
  if (variable_get('wisski_vocab_ctrl_needs_reindex', FALSE)) {
    global $base_root, $base_path;
    $ajax = '$.ajax({url : "' . url($base_root . $base_path . 'wisski/vocab_ctrl/index_cron') . '", ';
    $ajax .= 'type : "GET", timeout : 200, success : function () {}});';
    drupal_add_js($ajax, 'inline');

    $checked = TRUE;
  }

}


function wisski_vocab_ctrl_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      return array(
        0 => array(
          'info' => t('Vocabulary information'),
          'cache' => BLOCK_PER_PAGE,
        ),
      );

    case 'view':

      // check that current page is an individual
      if(is_numeric(arg(1))) $node = node_load(arg(1));
      if (!isset($node) || $node->type != 'individual') return;
      
      $inst = wisski_store_getObj()->wisski_ARCAdapter_delNamespace($node->title);
      $fids = variable_get('wisski_vocab_ctrl_block_infobox_fids', array('__vocs__', 'all', 'broader_labels', '__map__'));
      $content = wisski_vocab_ctrl_info_box($inst, array(), $fids);

      if (empty($content)) return;

      return array(
        'subject' => t('Vocabulary information'),
        'content' => $content,
      );

    case 'configure':
      
      $fids = wisski_vocab_ctrl_field_get(); 
      $options = array('broader_labels' => t('Broader entries'), '__map__' => t('A Google map'), '__image__' => t('An image'), '__vocs__' => t('Vocabularies containing the entry'));
      foreach ($fids as $fid => $i) {
        $options[$fid] = $i['name'];
      }
  
      return array(
        'fids' => array(
          '#type' => 'checkboxes',
          '#title' => t('Fields to be displayed'),
          '#description' => t('Only the selected fields will be shown in the block'),
          '#options' => $options,
          '#default_value' => variable_get('wisski_vocab_ctrl_block_infobox_fids', array_keys($options)),
        )
      );

    case 'save':
      
      $fids = array_keys(array_filter($edit['fids']));
      variable_set('wisski_vocab_ctrl_block_infobox_fids', $fids);
      return;
      
    default:
      return;

  }

}


function wisski_vocab_ctrl_info_box($inst, $vocs = array(), $fids = array()) {
  
  $vocs = (array) $vocs;
  if (empty($vocs)) $vocs = wisski_vocab_ctrl_get();
  $fids = (array) $fids;
  if (empty($fids)) $fids = array('all', 'broader_labels', '__vocs__', '__map__');
  
  // check if we shall show the special fields and remove them from the vocab fields
  $inc = array(
    '__vocs__' => FALSE,
    '__map__' => FALSE,
    '__image__' => FALSE,
  );
  foreach ($fids as $k => $fid) {
    if (isset($inc[$fid])) {
      $inc[$fid] = 1;
      unset($fids[$k]);
    }
  }
  
  // the special fields may need some normal fields that shall not be diplayed
  $inc_req = array(
    '__vocs__' => array('label'),
    '__map__' => array('latitude', 'longitude'),
    '__image__' => array('image'),
  );
  $query_fids = $fids;
  if (!in_array('all', $query_fids)) {
    foreach ($inc_req as $i => $reqs) {
      if ($inc[$i])
        foreach ($reqs as $r)
          $query_fids[] = $r;
    }
    $query_fids = array_unique($query_fids);
  }

  // do the lookup voc per voc
  $data_per_vid = array();
  foreach ($vocs as $v) {
    $data = wisski_vocab_ctrl_lookup($query_fids, $v, $inst, NULL, NULL, NULL, 'exact', 'never');
    if ($data) $data_per_vid[$v->vid] = $data;
  }
  
  if (count($data_per_vid) == 0) return NULL;  // no auth information, do not show the box
  
  $fields = wisski_vocab_ctrl_field_get();

  $name_vocs = count($data_per_vid) != 1; // if there are multiple vocs, the name of the originating voc is appenaded to each value 

  $content = array(
    '#suffix' => '</div>',
    '#prefix' => '<div class="wisski_vocab_ctrl_infobox">',
  );
  if ($inc['__vocs__']) {
    $content['in_vocs'] = array(
      '#type' => 'item',
      '#title' => 'Vocabularies',
      '#value' => '<ul><li>' . join(', ', array_map(function ($a) { return check_plain(wisski_vocab_ctrl_get($a, 'name')); }, array_keys($data_per_vid))) . '</li></ul>',
      '#weight' => 0,
    );
  }
  
  $c = 3;
  foreach ($data_per_vid as $vid => $data) {

    $data = $data[$inst];
    
    // for the first pair of coordinates we draw a map
    if ($inc['__map__'] && isset($data['latitude']) && isset($data['longitude']) && !isset($content['map'])) {
      // canonicalize coords to decimal format
      list($lat, $lng) = _wisski_vocab_ctrl_parse_coords($data['latitude'][0]['value'], $data['longitude'][0]['value']);
      
      $content['map'] = array(
        '#type' => 'item',
        '#title' =>  $name_vocs ? t('Location according to @v', array('@v' => $vocs[$vid]->name)) : t('Location'),
        '#value' => '<ul><li>' . _wisski_vocab_ctrl_make_google_map($lat, $lng) .'</li></ul>',
        '#weight' => 10000,
      );
    }
    
    // the first image will be shown
    if ($inc['__image__'] && isset($data['image']) && !isset($content['map'])) {
      
    }


    foreach ($fids as $fid) {
      if (!isset($data[$fid])) continue;
      $values = $data[$fid];

      if (!isset($content["field_$fid"])) {
        $content["field_$fid"] = array(
          '#type' => 'item',
          '#title' => $fid == 'broader_labels' ? t('Broader entries') : check_plain($fields[$fid]['name']),
          '#value' => '<ul>',
          '#weight' => $fid == 'label' ? 1 : ($fid == 'alt_label' ? 2 : $c++),
        );
      }
      
      if ($fid == 'broader_labels') {

        $content["field_$fid"]['#value'] .= '<li>';
        $content["field_$fid"]['#value'] .= join(' | ', array_map(function($a) { return check_plain($a); }, $values));
        if ($name_vocs) $content["field_$fid"]['#value'] .= ' (' . $vocs[$vid]->name . ')';
        $content["field_$fid"]['#value'] .= '</li>';

      } else {

        foreach ($values as $v) {
          $content["field_$fid"]['#value'] .= '<li>';
          $content["field_$fid"]['#value'] .= check_plain($v['value']);
          if ($name_vocs) $content["field_$fid"]['#value'] .= ' (' . $vocs[$vid]->name . ')';
          $content["field_$fid"]['#value'] .= '</li>';
        }

      }
    }
  }
  
  foreach ($content as $n => &$e) {
    if (substr($n, 0, 6) == 'field_') {
      $e['#value'] .= '</ul>';
    }
  }

  return drupal_render($content);

}


function _wisski_vocab_ctrl_parse_coords($lat, $lng) {

  if (preg_match('/[NSWE]/', $lat) || preg_match('/[NSWE]/', $lng)) {
    // degrees minutes seconds orientation/NSWE

    $lat_parts = preg_split('/[^-\d\w\.]+/u', $lat);
    $lng_parts = preg_split('/[^-\d\w\.]+/u', $lng);
   
    $lat = _wisski_vocab_ctrl_parse_coords_helper($lat_parts);
    $lng = _wisski_vocab_ctrl_parse_coords_helper($lng_parts);

  } else if (preg_match("/°|\d[°'`´ ]+\\d/", $lat)) {
    // +-degrees minutes seconds

    $lat_parts = preg_split('/[^-\d\.]+/u', $lat);
    $lng_parts = preg_split('/[^-\d\.]+/u', $lng);
    
    $lat = _wisski_vocab_ctrl_parse_coords_helper($lat_parts);
    $lng = _wisski_vocab_ctrl_parse_coords_helper($lng_parts);

  }
  
  return array($lat, $lng);

}


function _wisski_vocab_ctrl_parse_coords_helper($parts) {

  /* fill values if not present */
  $degrees   = (count($parts) > 0) ? (float)  $parts[0] : 0;
  $minutes   = (count($parts) > 1) ? (float)  $parts[1] : 0;
  $seconds   = (count($parts) > 2) ? (float)  $parts[2] : 0;
  $direction = (count($parts) > 3) ? (string) $parts[3] : 'Q'; // something different from S or W

  $dd = abs($degrees) + $minutes/60 + $seconds/3600;
  if ($direction == "S" || $direction == "W" || $degrees < 0) {
    $dd = $dd * -1;
  } // Don't do anything for N or E
  return $dd;

}


function _wisski_vocab_ctrl_make_google_map($lat, $lng) {
  $zoomlvl = 'zoom=8';
  $size = '&size=125x125';
  $maptype = '&maptype=roadmap';
  $marker = '&markers=color:red|label:A|' . $lat . ',' . $lng;
  $googleMaps = 'http://maps.google.com/maps/api/staticmap?';
  $googleMapsLink = 'http://maps.google.com/?';
  $loc = 'q=loc:' . $lat . ',' . $lng;
  $query = $googleMaps . $zoomlvl . $size . $maptype . $marker . '&sensor=false';
  $linkQuery = $googleMapsLink  .  $loc  .  '&z=8';
  $map = '<a target="_blank" href="'  .  $linkQuery  .  '"><img src="' . $query . '"></a>';
  return $map;
}





/*============================================ *
*  VOCABULARIES
* ============================================ *
* Functions dealing with vocabulary objects & definitions
*/


/** Get information about one or multilpe vocabularies
*
* @parameter $refresh delete the vocab object cache.
*   Use this after saving vocab objects.
*
* @return depends upon arguments
* - if $vid and $prop are set, returns the value of field/member $prop for
*   vocabulary with id $vid
* - if $vid is set, returns the vocabulary object with id $vid
* - if $vid is NULL, return a list of all vocabulary objects
*
* A vocabulary object contains
* - vid: the id
* - name: the human-readable name
* - aid: the id of the accesspoint that this vocab gets the data from
* - priority: a priority integer; the higher the better
* - group_id: the id of the group that the instances of this vocab
*   are mapped to
* - fields: assoc array defining the mapping between vocab fields and paths
* - indices: assoc array with indexing settings
*/
function wisski_vocab_ctrl_get($vid = NULL, $prop = NULL, $refresh = NULL) {
  include_once('wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_get($vid, $prop, $refresh);
}


/** Save a vocabulary object to db
* If not set, an id will be added.
*/
function wisski_vocab_ctrl_save(&$voc) {
  include_once('wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_save($voc);
}


/**Delete a vocab object from db
*/
function wisski_vocab_ctrl_delete($vid) {
  include_once('wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_delete($vid);
}


/** Generate all triples that should be imported to local triple store
* for instance $term_uri.
* Use this function if you want to refer to instance $term_uri in local data.
* It will create nodes for each instance etc.
*
* This function used to return all triples but now it directly saves it
* to the WissKI default graph.
*
* @return an empty array
*/
function wisski_vocab_ctrl_get_triples($vid, $term_uri, $direct_store = FALSE) {
  include_once(dirname(__FILE__) . '/wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_get_triples($vid, $term_uri, $direct_store);
}


/**
*/
function wisski_vocab_ctrl_get_path_array($voc, $field) {
  include_once(dirname(__FILE__) . '/wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_get_path_array($voc, $field);
}


/** Checks whether instance $uri of vocab $vid has already been imported
* via wisski_vocab_ctrl_get_triples()
*/
function wisski_vocab_ctrl_is_imported($vid, $uri) {
  include_once(dirname(__FILE__) . '/wisski_vocab_ctrl.inc');
  return _wisski_vocab_ctrl_is_imported($vid, $uri);
}


/** Implementation of hook_nodeapi
*
* Initiates a reindex after individual node has been added/edited
*/
function wisski_vocab_ctrl_nodeapi(&$node, $op, $a, $b) {
  if (($op == 'insert' || $op == 'update') && $node->type == 'individual') {
    if (variable_get('wisski_vocab_ctrl_last_reindex', 0) + 300 < time()) { // do a reindex at max every 5 min
      include_once(dirname(__FILE__) . '/wisski_vocab_ctrl.inc');
      wisski_vocab_ctrl_check_reindex(TRUE);
    }
  }
}




/*============================================ *
*  FIELDS
* ============================================ *
* Functions dealing with field arrays & definitions
*
* Fields are used to define the mapping between the vocabulary data
* and the paths in WIssKI.
* 
* Some fields are used to identify special semantics (like labels, coordintes)
* and will be used by other components.
* 
*/


/** Get information for one or more fields
* @return depending on args (semantics see wisski_vocab_ctrl_get())
*
* A field array contains
* - fid: field id
* - name: the human-readable name
* - origin: where the field was defined: 'built-in' or 'user'
* - target_type: the type of the target value:
*   a 'literal' or 'same_class' as source instance
* - description: a description of the field
*/
function wisski_vocab_ctrl_field_get($fid = NULL, $col = NULL) {

  $fields = array(
    'label' => array(
      'fid' => 'label',
      'origin' => 'built-in',
      'name' => t('Label'),
      'target_type' => 'literal', 
      'description' => t('The strings that this thing is typically referred to with. If a distinction between preferred and alternate labels is made, this field should be used for preferred labels.'),
    ),
    'alt_label' => array(
      'fid' => 'alt_label',
      'origin' => 'built-in',
      'name' => t('Alternate Label'),
      'target_type' => 'literal',
      'description' => t('If a distinction between preferred and alternate labels is made, this field should be used for alternate labels.'),
    ), 
    'broader' => array(
      'fid' => 'broader',
      'origin' => 'built-in',
      'name' => t('Broader'),
      'target_type' => 'same_class',
      'description' => t('This relation points to things that are somehow referred to as being "broader"'),
    ), 
    'narrower' => array(
      'fid' => 'narrower',
      'origin' => 'built-in',
      'name' => t('Narrower'),
      'target_type' => 'same_class',
      'description' => t('This relation points to things that are somehow referred to as being "narrower"'),
    ),
  );
  
  if (!$fid || !isset($fields[$fid])) {
    $rows = db_query('SELECT * FROM {wisski_vocab_ctrl_fields}');
    while ($row = db_fetch_array($rows)) {
      $fields[$row['fid']] = $row;
    }
  }
  
  if (!$fid) {
    return $fields;
  } elseif (!isset($fields[$fid])) {
    return NULL;
  } elseif (!$col) {
    return $fields[$fid];
  } elseif (!isset($fields[$fid][$col])) {
    return NULL;
  } else {
    return $fields[$fid][$col];
  }

}


/** Save a field to db*/
function wisski_vocab_ctrl_field_set($field) {

  if (wisski_vocab_ctrl_field_get($field['fid'])) {
    // update
    drupal_write_record('wisski_vocab_ctrl_fields', $field, 'fid');
  } else {
    // insert
    drupal_write_record('wisski_vocab_ctrl_fields', $field);
  }
  
}


/*Delete a field from db*/
function wisski_vocab_ctrl_field_delete($fid) {
  db_query("DELETE FROM {wisski_vocab_ctrl_fields} WHERE fid = '%s'", $fid);
}



/*============================================ *
*  MAPPINGS
* ============================================ *
* Functions dealing with mapping arrays & definitions
*
* Mappings are used to define queries for non-local triple stores that can then
* be associated with a field and mapped to local paths.
* As currently only sparql endpoints can be queried, a mapping always consists
* of a sparql select query that has 2 vars: 'source' for the instance uri and
* 'target' for the field value.
* A mapping may also define a regex so that the part of target that does not
* match the regex will be stripped (only the match will be set as target value)
* 
*/


/** Get information about one or multiple mappings
*
* @return depends on args (for semantics see wisski_vocab_ctrl_get())
*/
function wisski_vocab_ctrl_mapping_get($mid = NULL, $col = NULL) {
  
  $mappings = array();
  $rows = db_query('SELECT * FROM {wisski_vocab_ctrl_mappings}' . (($mid) ? " WHERE mid = %d" : ''), $mid);
  while ($row = db_fetch_array($rows)) {
      $mappings[$row['mid']] = $row;
  }
  
  if (!$mid) {
    return $mappings;
  } elseif (!isset($mappings[$mid])) {
    return NULL;
  } elseif (!$col) {
    return $mappings[$mid];
  } elseif (!isset($mappings[$mid][$col])) {
    return NULL;
  } else {
    return $mappings[$mid][$col];
  }

}


/** Save a mapping to db
*/
function wisski_vocab_ctrl_mapping_set($mapping) {

  if (wisski_vocab_ctrl_mapping_get($mapping['mid'])) {
    // update
    drupal_write_record('wisski_vocab_ctrl_mappings', $mapping, 'mid');
  } else {
    // insert
    drupal_write_record('wisski_vocab_ctrl_mappings', $mapping);
  }
  
}


/** delete a mapping*/
function wisski_vocab_ctrl_mapping_delete($mid) {
  db_query("DELETE FROM {wisski_vocab_ctrl_mappings} WHERE mid = '%s'", $mid);
}



/*============================================ *
*  VOCABULARY ACCESS
* ============================================ */



/** Search a vocabulary.
*
* @parameter $fids the fields that shall be searched (the ids)
*   This method accepts special fields:
*   - labels: expands to all label fields (currently label and alt_label)
*   - broader_labels: returns an array of labels of broader terms
* @parameter $voc the vocabulary that shall be searched; id or object
* @parameter $source if non-NULL, search information about that instance.
*   The values of fields $fids for instance $source are gathered and returned.
*   $target must be NULL.
* @parameter $target if non-NULL, search instances with value $target in
*   fields $fids. This is the typical term lookup setting.
*   $source must be NULL.
* @parameter $limit if set, the maximum return set cardinality
* @parameter $offset if set, discard $offset heading return sets
*   (use with $limit like in SQL, SPARQL)
* @parameter $match_mode How precise $target must match the actual value.
*   This only applies to $target's that are literals. Supported are
*   'exact', 'contains', 'starts_word', 'contains_word' and 'regex'.
* @parameter $use_index whether an index shall be used for lookup. Indexing may
*   speed up lookup time but may retrieve outdated data on dynamic sparql
*   endpoints. Supports 'always', 'never' and 'normal'.
*   'never' will always search on real data. 'always' will search on index data
*   only. If no index is defined, it will return emtpy set! 'normal' will
*   prefer index data but fall back to real data if not defined.
*   Indexes can currently only be defined for labels fields.
*
* @return assoc array keys being the found source/term URIs and the values
*   being an array where each key is a field id mapped to a list of values.
*   E.g.
*   array(
*     <uri1> => array(
*       <field1> => array(<value11>, <value12>, ...),
*       <field2> => array(<value21>, ...),
*     <uri2> => array(...)
*   )
*   <value**> is again an array containing
*   - value: the actual value (a string)
*   - target type: the value type; 'literal' or 'uri' (see ARC structures)
*   - target lang: the rdf language (if literal)
*   - target datatype: the rdf datatype (if literal)
*   If <field*> is 'broader_labels' then the value array will be of form
*   array('broader label 1', 'broader label 2', ..., 'top label')
*     
*/
function wisski_vocab_ctrl_lookup($fids, $voc, $source, $target, $limit = NULL, $offset = NULL, $match_mode = 'exact', $use_index = 'normal', $is_autocomp = FALSE) {
  include_once('wisski_vocab_ctrl.inc');
  $ret = _wisski_vocab_ctrl_lookup($fids, $voc, $source, $target, $limit, $offset, $match_mode, $use_index, $is_autocomp);
  return $ret;
}



/** Write log info to a file
* TODO: should be in wisski module or deleted
*/
function wisski_log() {
  $args = func_get_args();
  foreach ($args as $arg) {
    file_put_contents("/tmp/mswisski.log", "[" . date(DATE_ISO8601) . "] " . print_r($arg,true) . "\n", FILE_APPEND);
  }
}
  


